# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type GrupoCuentaEntity {
  IdGrupo: String!
  Grupo: String!
}

type CategoriaCuentaEntity {
  IdCategoria: String!
  IdClase: Int!
  Categoria: String!
}

type ClaseCuentaEntity {
  ID: Int!
  IdClase: String!
  IdGrupo: String!
  Clase: String!
}

type ActFijosClasificadorSubgrupoEntity {
  Grupo: Int!
  Codigo: Int!
  Descripcion: String!
  Tasa: Float!
}

type MutationResponse {
  success: Boolean!
  error: String
}

type DivisionesEntity {
  IdDivision: Float!
  Division: String!
}

type TipoUsuarios {
  IdTipo: Int!
  TipoUsuario: String!
}

type UsuariosEntity {
  IdUsuario: Float!
  Usuario: String!
  Contrasena: String!
  IdTipoUsuario: Float!
  TipoUsuario: TipoUsuarios!
  CambiarContrasena: Boolean!
  IdDivision: Float!
  Division: DivisionesEntity!
  Token: String!
  RefreshToken: String!
}

type UsuarioQueryResponse {
  success: Boolean!
  data: UsuariosEntity
  error: String
}

type UsuariosQueryResponse {
  success: Boolean!
  data: [UsuariosEntity!]
  error: String
}

type CentrosView {
  IdUnidad: Float!
  Nombre: String!
  IdSubdivision: Float!
  Subdivision: String!
  IdDivision: Float!
  Division: String!
}

type ContaConexionesEntity {
  Id: Float!
  IdUnidad: Float!
  Unidad: CentrosView!
  Consolidado: Boolean!
  IdDivision: Float!
  Division: DivisionesEntity!
  IpRodas: String
  BaseDatos: String
  FechaActualizacion: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Conexiones {
  name: String!
}

type ConexionesQueryResponse {
  success: Boolean!
  data: [Conexiones!]
  error: String
}

type EntidadesRodas {
  sigla: String!
  entidad: String!
}

type DWHConexiones {
  IdUnidad: Float!
  ConexionRest: String
  ConexionDWH: String
}

type DWHConexionQueryResponse {
  success: Boolean!
  data: DWHConexiones
  error: String
}

type Cargos {
  IdCargo: Float!
  Cargo: String!
}

type CargosQueryResponse {
  success: Boolean!
  data: [Cargos!]
  error: String
}

type CuentasAgrupadas {
  Cuenta: String!
}

type ClasificadorCuentaRealEntity {
  TipoClasificador: Float!
  Cuenta: String!
  SubCuenta: String!
  Nombre: String!
  Naturaleza: String!
  Tipo_Analisis_1: String
  Tipo_Analisis_2: String
  Tipo_Analisis_3: String
  Tipo_Analisis_4: String
  Tipo_Analisis_5: String
  Obligacion: Boolean!
  Tipo_Moneda: String
  Grupo: String!
  Clase: String!
  Categoria: String!
  Clasificacion: String!
  Tipo: String!
  Estado: String!
  Tipo_Analisis_1_Cons: String
  Tipo_Analisis_2_Cons: String
  Tipo_Analisis_3_Cons: String
  Tipo_Analisis_4_Cons: String
  Tipo_Analisis_5_Cons: String
  SeUtiliza: String
}

type IConciliaReporteClasificador {
  Cuenta: String!
  SubCuenta: String!
  Descripcion: String!
  Crt1Clasif: String
  Crt2Clasif: String
  Crt3Clasif: String
  Crt4Clasif: String
  Crt5Clasif: String
  NatClasif: String
  OblClasif: Boolean
  grupo_clasif: String
  clase_clasif: String
  categ_clasif: String
  clasif_clasif: String
  tipo_clasif: String
  estado_clasif: String
  Crt1Rodas: String
  Crt2Rodas: String
  Crt3Rodas: String
  Crt4Rodas: String
  Crt5Rodas: String
  NatRodas: String
  OblRodas: Boolean
  grupo_rodas: String
  clase_rodas: String
  categ_rodas: String
  clasif_rodas: String
  tipo_rodas: String
  estado_rodas: String
}

type IConciliaReporteConsulta {
  Periodo: Float!
  Centro: String!
  IdConsulta: String!
  Consulta: String!
  Cuenta: String
  SubCuenta: String
  Analisis1: String
  Analisis2: String
  Analisis3: String
  Analisis4: String
  Analisis5: String
  Total: Float!
  Consolidado: Boolean!
}

type IConciliaReporteExpresiones {
  Centro: Float!
  Consolidado: Boolean!
  Periodo: Float!
  Expresion: String!
  Valor: Float!
  Operador: String!
  ExpresionC: String!
  ValorC: Float!
  Resultado: String!
}

type IConciliaReporteValores {
  Centro: String!
  Periodo: Float!
  Consolidado: Boolean!
  Expresion: String!
  Valor: Float!
  Operador: String!
  ValorRodas: Float!
  Estado: String!
  Division: String!
}

type IConciliaCuadreSistemas {
  Centro: Float!
  Sistema: String!
  Estado: String!
}

type IConciliaInformacionContabilidad {
  Criterio: String!
  Saldo: Float!
}

type ConciliaContabilidadQueryResponse {
  ReporteClasificador: [IConciliaReporteClasificador!]!
  ReporteConsultas: [IConciliaReporteConsulta!]!
  ReporteExpresiones: [IConciliaReporteExpresiones!]!
  ReporteValores: [IConciliaReporteValores!]!
  CuadreSistemas: [IConciliaCuadreSistemas!]!
  Informacion: [IConciliaInformacionContabilidad!]!
}

type IChequeoCentroVsConsolidado {
  Centro: String!
  Unidad: String!
  Consolidado: Boolean!
  Periodo: Float!
  IdConsulta: String!
  Consulta: String!
  Cuenta: String
  SubCuenta: String
  Analisis1: String
  Analisis2: String
  Analisis3: String
  Analisis4: String
  Analisis5: String
  Total: Float!
}

type ConciliaDWH {
  Tipo: String!
  IdCentro: Float!
  Centro: String!
  IdUnidad: String!
  Unidad: String!
  IdPiso: String!
  Almacen: String
  Cuenta: String
  Periodo: String!
  SaldoGolden: Float!
  SaldoRestaurador: Float!
  DifGoldenRest: Float!
  SaldoDistribuidor: Float!
  DifGoldenDist: Float!
  SaldoRodas: Float!
  DifGoldenRodas: Float!
  IdDivision: Float!
  Division: String!
  CuentaR: String
  Nota: String
}

type Empleado {
  IdEmpleado: Float!
  Empleado: String!
  IdCargo: Float!
  Cargo: Cargos!
  IdDivision: Float!
  Division: DivisionesEntity!
}

type EmpleadoQueryResponse {
  success: Boolean!
  data: Empleado
  error: String
}

type EmpleadosQueryResponse {
  success: Boolean!
  data: [Empleado!]
  error: String
}

type Supervisor {
  IdSupervisor: Float!
  Supervisor: String!
  IdCargo: Float!
  Cargo: Cargos!
  IdDivision: Float!
  Division: DivisionesEntity!
}

type SupervisorQueryResponse {
  success: Boolean!
  data: Supervisor
  error: String
}

type SupervisoresQueryResponse {
  success: Boolean!
  data: [Supervisor!]
  error: String
}

type ParteAtrasoEntity {
  IdUnidad: Float!
  Unidad: String!
  IdDivision: Float!
  Division: String!
  AtrasoRest: String!
  AtrasoDWH: String!
  AtrasoDist: String!
  AtrasoEmp: String!
}

type DatosIdGamEntity {
  IdUnidad: Float!
  Unidad: String!
  Ano: Float!
  Mes: Float!
  Fecha: String!
  Version: String!
  UltimaCircular: String!
  PeriodoRestaurado: String!
  vUtilnet: String!
}

type ConciliacionOperacionesDWH {
  Documento: String!
  Emisor: String!
  FechaE: String
  ImporteE: Float!
  Receptor: String!
  FechaR: String
  ImporteR: Float!
  Diferencia: Float!
}

type ConciliacionOperacionesDWHQueryResponse {
  success: Boolean!
  data: [ConciliacionOperacionesDWH!]
  error: String
}

type SubdivisionesEntity {
  IdSubdivision: Float!
  Subdivision: String!
  IdDivision: Float!
}

type ConcExtContabilidad {
  Id: Float!
  Anno: String!
  Mes: Float!
  CuentaE: String!
  SubCuentaE: String!
  TipoE: String!
  EmisorE: Float!
  ReceptorE: Float!
  DocumentoE: String!
  FechaE: DateTime!
  ValorE: Float!
  CuentaR: String!
  SubCuentaR: String!
  TipoR: String!
  EmisorR: Float!
  ReceptorR: Float!
  DocumentoR: String!
  FechaR: DateTime!
  ValorR: Float!
  Diferencia: Float!
  Recibido: Boolean!
}

type ViewConciliaExtContabilidad {
  Id: Float!
  Anno: String!
  Mes: Float!
  Tipo: String!
  CuentaEmisor: String!
  SubCuentaEmisor: String!
  DivisionEmisor: Float!
  Emisor: Float!
  CuentaReceptor: String!
  SubCuentaReceptor: String!
  DivisionReceptor: Float!
  Receptor: Float!
  Documento: String!
  FechaEmision: String
  ValorEmisor: Float!
  FechaRecepcion: String
  ValorReceptor: Float!
  DiferenciaDias: Float
  DiferenciaImporte: Float!
  Recibido: Boolean!
}

type ActaConciliacion {
  ID: Float!
  Detalle: String!
  Emisor: Float!
  Receptor: Float!
  SaldoEmisor: Float!
  SaldoReceptor: Float!
  Diferencia: Float!
}

type ConciliaExternaContabilidadEntity {
  getConciliaContab: [ViewConciliaExtContabilidad!]!
  getActaConciliacion: [ActaConciliacion!]!
}

type ViewConciliaExtContabilidadResumen {
  Anno: Float!
  Mes: Float!
  DivisionEmisor: String!
  ValorEmisor: Float!
  DivisionReceptor: String!
  ValorReceptor: Float!
  Diferencia: Float!
}

type ViewConciliaExtContabilidadDeudasPorEdades {
  TipoOperacion: String!
  Anno: Float!
  Mes: Float!
  IdDivision: Float!
  Division: String!
  Valor: Float!
  De0a30: Float!
  De30a60: Float!
  De60a90: Float!
  De90a365: Float!
  MasDe1Anno: Float!
}

type TipoEntidades {
  Id: Float!
  Entidades: String!
  Descripcion: String!
}

type ContaTipoentidadesQueryResponse {
  success: Boolean!
  data: [TipoEntidades!]
  error: String
}

type ContaTipoentidadQueryResponse {
  success: Boolean!
  data: TipoEntidades
  error: String
}

type ContaEpigrafesEntity {
  IdEpigrafe: Float!
  Epigrafe: String!
}

type ContaElementosGastosEntity {
  Egasto: String!
  Descripcion: String!
  UsoContenido: String!
  TipoEntidad: String!
  CuentaAsociada: String!
  IdEpigrafe: Float!
}

type ClasificarEntidadesEntity {
  IdUnidad: Float!
  Unidad: String
  IdTipoEntidad: Float!
  TipoEntidad: String!
  Division: String!
  SubDivision: String!
}

type ExpresionesResumenEntity {
  IdExpresion: Float!
  Expresion: String!
  Descripcion: String
  Acumulado: Boolean!
  OperacionesInternas: Boolean!
  Centralizada: Boolean!
  IdDivision: Float!
}

type ExpresionesDetalleEntity {
  Id: Float!
  IdExpresion: Float!
  Centro: String
  Cta: String
  SubCta: String
  Crit1: String
  Crit2: String
  Crit3: String
  Signo: String!
  PorCiento: Float!
  TipoValor: Float!
  TipoValorDesc: String
}

type ContaTipoValorExpresionesEntity {
  IdTipoValor: Float!
  Valor: String!
}

type ContaOperadoresEntity {
  Id: String!
  Operador: String!
}

type ContaComprobarExpresionesEntity {
  Id: Float!
  IdExpresion: Float!
  IdOperador: String!
  IdExpresionC: Float!
  Centro: Boolean!
  Complejo: Boolean!
  Con: Boolean!
  Centralizada: Boolean!
  IdDivision: Float!
  Expresion: ExpresionesResumenEntity!
  ExpresionC: ExpresionesResumenEntity!
  Operador: ContaOperadoresEntity!
}

type ContaOperadoresQueryResponse {
  success: Boolean!
  data: [ContaOperadoresEntity!]
  error: String
}

type ContaNoUsarEnCuentaEntity {
  Id: Float!
  Codigo: String
  Cta: String
  SubCta: String
  Crit1: String
  Crit2: String
  Crit3: String
  Crit4: String
  Crit5: String
  Centralizada: Boolean!
  IdDivision: Float!
}

type ContaNoUsarEnCuentasQueryResponse {
  success: Boolean!
  data: [ContaNoUsarEnCuentaEntity!]
  error: String
}

type ContaNoUsarEnCuentaQueryResponse {
  success: Boolean!
  data: ContaNoUsarEnCuentaEntity
  error: String
}

type TipoUsuariosQueryResponse {
  success: Boolean!
  data: [TipoUsuarios!]
  error: String
}

type TipoUsuarioQueryResponse {
  success: Boolean!
  data: TipoUsuarios
  error: String
}

type ComprobarValoresEntity {
  Id: Float!
  IdCentro: Float!
  Centro: String!
  IdExpresion: Float!
  Expresion: String!
  IdOperador: String!
  Operador: String!
  Valor: Float!
  IdDivision: Float!
  Consolidado: Boolean!
  Activo: Boolean!
}

type CajaConfiguracionEntity {
  IdCaja: Int!
  IP: String!
  SN: String!
  IdUnidad: Int!
}

type ConciliaAFT {
  Division: String!
  SubDivision: String!
  Tipo: String!
  Centro: String!
  IdCentro: Float!
  IdUnidad: Float!
  Unidad: String!
  Periodo: Float!
  Cta: String!
  Scta: String!
  An1: String!
  An2: String!
  An3: String!
  Saldo_AF: Float!
  Saldo_Rodas: Float!
  Diferencia: Float!
}

type DiferenciaClasificadorCNMB {
  Unidad: String!
  Grupo: Float!
  Codigo: Float!
  Descripcion: String!
  Deprecia: Boolean!
  TasaUC: Float!
  Tasa: Float!
}

type ConciliaAftData {
  ConciliaAFT: [ConciliaAFT!]
  DiferenciaClasificadorCNMB: [DiferenciaClasificadorCNMB!]
}

type ConciliaUH {
  Tipo: String!
  IdDivision: Float!
  Division: String!
  SubDivision: String!
  Centro: String!
  IdCentro: Float!
  IdUnidad: Float!
  Unidad: String!
  Periodo: Float!
  Cuenta: String!
  SubCuenta: String!
  Analisis1: String
  Analisis2: String
  Analisis3: String
  Analisis4: String
  Analisis5: String
  SaldoUH: Float!
  SaldoRodas: Float!
  Diferencia: Float!
}

type ContaEstadisticaView {
  IdDivision: Int!
  Division: String!
  IdCentro: Int!
  Centro: String!
  Consolidado: Boolean!
  Annio: Int!
  Periodo: Int!
  FechaActualizacion: DateTime
  FechaInicio: DateTime
  FechaFin: DateTime
  Comprobantes: Int!
  Traspasados: Int!
  SinTraspasar: Int!
  Inconclusos: Int!
  Anulados: Int!
}

type ContaEstadisticaParteView {
  IdDivision: Float!
  Division: String!
  IdCentro: Float!
  Centro: String!
  Consolidado: Boolean!
  Anno: Int!
  Periodo: Int!
  FechaActualizacion: DateTime
  FechaInicio: DateTime
  FechaFin: DateTime
  Comprobantes: Int!
  Traspasados: Int!
  SinTraspasar: Int!
  Inconclusos: Int!
  Anulados: Int!
  Conexion: String!
}

type ContaInformeCtasCobrarPagarView {
  Division: String!
  Organismo: String!
  Grupo: String!
  Cuenta: String!
  ProveedorCliente: String
  Saldo: Float!
  Hasta30: Float!
  De30a60: Float!
  De60a90: Float!
  MasDe90: Float!
}

type ConciliaInternaConta {
  Division: String!
  Annio: String!
  Periodo: String!
  Tipo: String!
  Emisor: String!
  Receptor: String!
  CuentaE: String!
  SubCuentaE: String!
  ValorE: Float!
  Operador: String!
  CuentaR: String!
  SubCuentaR: String!
  ValorR: Float!
  Diferencia: Float!
}

type ConciliaExternaEntreUnidadesEntity {
  ID: Float!
  Annio: Float!
  Mes: Float!
  IdUnidad: Float!
  IdUnidadOD: Float!
  IdUsuarioEmisor: Float
  IdUsuarioReceptor: Float
  IdUsuarioSupervisor: Float
  Nota: String
}

type ConciliaExternaCentrosNoConciliados {
  Emisor: String!
  Receptor: String!
}

type ConciliaExternaDatosConciliacionEntity {
  IdConciliacion: Int!
  Annio: Int!
  Mes: Int!
  Abierta: Boolean!
}

type Query {
  authenticateUsuario(usuario: String!, passw: String!): UsuariosEntity!
  refreshToken(token: String!): UsuariosEntity!
  getAllUsuarios: UsuariosQueryResponse!
  getUsuariosByIdDivision(idDivision: Int!): UsuariosQueryResponse!
  getUsuarioById(id: Int!): UsuarioQueryResponse!
  getUsuarioByName(name: String!): UsuariosQueryResponse!
  getAllDivisiones: [DivisionesEntity!]!
  getAllDivisionesByUsuario: [DivisionesEntity!]!
  getDivisionById(id: Int!): [DivisionesEntity!]!
  getAllContaConexiones: [ContaConexionesEntity!]!
  getContaConexionById(id: Int!): ContaConexionesEntity!
  entidadesRodas(ip: String!): [EntidadesRodas!]!
  getAllUnidades: [CentrosView!]!
  getAllUnidadesByUsuario: [CentrosView!]!
  getUnidadesByIdSubdivision(idSubdivision: Int!): [CentrosView!]!
  getUnidadesByIdDivision(idDivision: Int!): [CentrosView!]!
  getDWHConexion(idDivision: Int!): DWHConexionQueryResponse!
  getAllCargos: CargosQueryResponse!
  conciliaDWH(conciliaDWHInput: ConciliaDWHInput!): [ConciliaDWH!]!
  conciliaContabilidad(conciliaContaInput: ConciliaContaInput!): ConciliaContabilidadQueryResponse!
  chequearCentros(chequearCentrosInput: ChequearCentrosInput!): [IChequeoCentroVsConsolidado!]!
  getAllClasificadorCuentas(tipo: Int): [ClasificadorCuentaRealEntity!]!
  getClasificadorCuenta(cuenta: String!, subcuenta: String!, tipo: Int!): ClasificadorCuentaRealEntity!
  getCuentasAgrupadas: [CuentasAgrupadas!]!
  getAllEmpleados: EmpleadosQueryResponse!
  getEmpleadosByIdDivision(idDivision: Int!): EmpleadosQueryResponse!
  getEmpleadoById(id: Int!): EmpleadoQueryResponse!
  getAllSupervisores: SupervisoresQueryResponse!
  getSupervisoresByIdDivision(idDivision: Int!): SupervisoresQueryResponse!
  getSupervisorById(id: Int!): SupervisorQueryResponse!
  parteAtrasos(idDivision: Int!): [ParteAtrasoEntity!]!
  datosIdGAM(idDivision: Int!): [DatosIdGamEntity!]!
  getDataBases(ip: String!, ususario: String!, password: String!): ConexionesQueryResponse!
  conciliaInternaDWH(conciliaInternaDWHInput: ConciliaOperacionesDWHInput!): ConciliacionOperacionesDWHQueryResponse!
  getAllSubdivisiones: [SubdivisionesEntity!]!
  getSubdivisionesByIdDivision(idDivision: Int!): [SubdivisionesEntity!]!
  getConciliacionExternaContab(conciliaExternaInput: ConciliaExternaContabilidadInput!): ConciliaExternaContabilidadEntity!
  getConciliacionExternaContabResumen(annio: Int!, mes: Int!, mesActual: Boolean!): [ViewConciliaExtContabilidadResumen!]!
  getConciliacionExternaContabDeudasPorEdades(annio: Int!, mes: Int!, mesActual: Boolean!): [ViewConciliaExtContabilidadDeudasPorEdades!]!
  getDiferenciasEnConciliacion(annio: Int!, mes: Int!): [ConcExtContabilidad!]!
  getAllTipoEntidades: ContaTipoentidadesQueryResponse!
  getTipoEntidadById(id: Int!): ContaTipoentidadQueryResponse!
  getAllEpigrafes: [ContaEpigrafesEntity!]!
  getEpigrafeById(id: Int!): ContaEpigrafesEntity!
  getAllElementosGastos: [ContaElementosGastosEntity!]!
  getElementoGastoById(id: String!): ContaElementosGastosEntity!
  getAllClasificadorEntidades: [ClasificarEntidadesEntity!]!
  getClasificadorEntidad(idUnidad: Int!): ClasificarEntidadesEntity!
  getAllExpresionesResumen: [ExpresionesResumenEntity!]!
  getExpresionResumenById(id: Int!): ExpresionesResumenEntity!
  getAllExpresionesDetalle: [ExpresionesDetalleEntity!]!
  getExpresionesDetalleByIdResumen(idResumen: Int!): [ExpresionesDetalleEntity!]!
  getExpresionDetalleById(id: Int!): ExpresionesDetalleEntity!
  getAllContaTipoValorExpresiones: [ContaTipoValorExpresionesEntity!]!
  getAllComprobarExpresiones: [ContaComprobarExpresionesEntity!]!
  getComprobarExpresionById(id: Int!): ContaComprobarExpresionesEntity!
  getAllOperadores: ContaOperadoresQueryResponse!
  getAllNoUsarEnCuenta: ContaNoUsarEnCuentasQueryResponse!
  getNoUsarEnCuentaById(id: Int!): ContaNoUsarEnCuentaQueryResponse!
  getAllTipoUsuarios: TipoUsuariosQueryResponse!
  getTipoUsuarios(id: Int!): TipoUsuarioQueryResponse!
  getAllComprobarValores: [ComprobarValoresEntity!]!
  getComprobarValorById(id: Int!): ComprobarValoresEntity!
  getCajasConfiguracion: [CajaConfiguracionEntity!]!
  getCajaConfiguracion(id: Int!): CajaConfiguracionEntity!
  conciliaAFT(conciliaAftInput: ConciliaAftInput!): ConciliaAftData!
  conciliaUH(conciliaUhInput: ConciliaUhInput!): [ConciliaUH!]!
  contaEstadistica(contaEstadisticaInput: ContaEstadisticaInput!): [ContaEstadisticaView!]!
  contaEstadisticaParte: [ContaEstadisticaParteView!]!
  conciliaInternaConta(conciliaInternaContaInput: ConciliaInternaContaInput!): [ConciliaInternaConta!]!
  getAllClaseCuenta: [ClaseCuentaEntity!]!
  getClaseCuentaById(id: Int!): ClaseCuentaEntity!
  getClaseCuentaByIdGrupo(idGrupo: String!): [ClaseCuentaEntity!]!
  getAllCategoriaCuenta: [CategoriaCuentaEntity!]!
  getCategoriaCuentaById(id: String!): CategoriaCuentaEntity!
  getCategoriaCuentaByIdClase(idClase: Int!): [CategoriaCuentaEntity!]!
  getAllGrupoCuenta: [GrupoCuentaEntity!]!
  getGrupoCuentaById(id: String!): GrupoCuentaEntity!
  conciliaExternaDWH(conciliaExternaDWHInput: ConciliaOperacionesDWHInput!): ConciliacionOperacionesDWHQueryResponse!
  getConciliacionEntreUnidades(annio: Int!, mes: Int!, unidad: Int!, unidadOD: Int!): ConciliaExternaEntreUnidadesEntity
  getCentrosNoConciliados(annio: Int!, mes: Int!): [ConciliaExternaCentrosNoConciliados!]!
  getAllDatosConciliacionExterna: [ConciliaExternaDatosConciliacionEntity!]!
  getDatosConciliacionExterna(anno: Int!, mes: Int!): ConciliaExternaDatosConciliacionEntity
  getAllActFijosClasificadorSubgrupo: [ActFijosClasificadorSubgrupoEntity!]!
  getActFijosClasificadorSubgrupo(grupo: Int!, codigo: Int!): ActFijosClasificadorSubgrupoEntity!
  contaInformeCtasCobrarPagar(idDivision: Int!, annio: Int!, periodo: Int!): [ContaInformeCtasCobrarPagarView!]!
}

input ConciliaDWHInput {
  idDivision: Float!
  idCentro: Float!
  periodo: Float!
  annio: Float!
  tipoCentro: Float!
  ventasAcumuladas: Boolean!
}

input ConciliaContaInput {
  idCentro: Float!
  periodo: Float!
  annio: Float!
  tipoCentro: Float!
  tipoEntidad: Float!
}

input ChequearCentrosInput {
  idCentro: Float!
  annio: Float!
  periodo: Float!
  centrosAChequear: [Int!]!
}

input ConciliaOperacionesDWHInput {
  FechaInicial: String!
  FechaFinal: String!
  IdDivision: Float!
  IdSubdivision: Float!
  IdUnidad: Float!
  IdDivisionOD: Float!
  IdSubdivisionOD: Float!
  IdUnidadOD: Float!
}

input ConciliaExternaContabilidadInput {
  Annio: Float!
  Mes: Float!
  MesActual: Boolean!
  Division: Float
  Unidad: Float!
  DivisionOD: Float
  UnidadOD: Float!
  UsuarioEmisor: Float
  UsuarioReceptor: Float
  UsuarioSupervisor: Float
  Nota: String
}

input ConciliaAftInput {
  idCentro: Float!
  periodo: Float!
  annio: Float!
}

input ConciliaUhInput {
  idCentro: Float!
  periodo: Float!
  annio: Float!
}

input ContaEstadisticaInput {
  idDivision: Int!
  annio: Float!
  periodo: Float!
}

input ConciliaInternaContaInput {
  annio: Int!
  periodo: Int!
  centro: Int!
  unidad: Int!
  emisorReceptor: Int!
}

type Mutation {
  changePassword(idUsuario: Int!, password: String!): MutationResponse!
  createUsuario(usuarioInfo: UsuarioInput!): MutationResponse!
  updateUsuario(usuarioInfo: UsuarioInput!): MutationResponse!
  deleteUsuario(IDs: [Int!]!): MutationResponse!
  createContaConexion(conexionInfo: ContaConexionInput!): MutationResponse!
  updateContaConexion(conexionInfo: ContaConexionInput!): MutationResponse!
  deleteContaConexion(IDs: [Int!]!): MutationResponse!
  updateDWhConexion(dwhConexionInput: DWHConexionesInput!): MutationResponse!
  iniciarSaldos(iniciarSaldosInput: IniciarSaldosInput!): Boolean!
  arreglaClasificadorCuenta(idUnidad: Int!, tipoUnidad: String!, annio: String!): Boolean!
  saveClasificadorCuenta(clasificadorInfo: ClasificadorCuentaRealInput!): MutationResponse!
  deleteClasificadorCuenta(cuenta: String!, subcuenta: String!, tipo: Int!): MutationResponse!
  createEmpleado(empleadoInfo: EmpleadoInput!): MutationResponse!
  updateEmpleado(empleadoInfo: EmpleadoInput!): MutationResponse!
  deleteEmpleado(IDs: [Int!]!): MutationResponse!
  createSupervisor(supervisorInfo: SupervisorInput!): SupervisorQueryResponse!
  updateSupervisor(supervisorInfo: SupervisorInput!): SupervisorQueryResponse!
  deleteSupervisor(IDs: [Int!]!): SupervisorQueryResponse!
  updateConciliaContab(data: [ConciliaExternaContabilidadUpdateInput!]!): MutationResponse!
  createTipoEntidad(tipoEntidadInfo: TipoEntidadInput!): MutationResponse!
  updateTipoEntidad(tipoEntidadInfo: TipoEntidadInput!): MutationResponse!
  deleteTipoEntidad(IDs: [Int!]!): MutationResponse!
  createEpigrafe(epigrafeInfo: EpigrafeInput!): MutationResponse!
  updateEpigrafe(epigrafeInfo: EpigrafeInput!): MutationResponse!
  deleteEpigrafe(IDs: [Int!]!): MutationResponse!
  saveElementoGasto(elementoGastoInfo: ElementoGastoInput!): MutationResponse!
  deleteElementoGasto(id: String!): MutationResponse!
  createClasificadorEntidad(clasificadorEntidadInfo: ClasificadorEntidadInput!): MutationResponse!
  updateClasificadorEntidad(clasificadorEntidadInfo: ClasificadorEntidadInput!): MutationResponse!
  deleteClasificadorEntidad(IDs: [Int!]!): MutationResponse!
  createExpresion(expresionInput: ContaExpresionInput!): MutationResponse!
  updateExpresion(expresionInput: ContaExpresionInput!): MutationResponse!
  deleteExpresionResumen(IDs: [Int!]!): MutationResponse!
  deleteExpresionDetalle(id: [Int!]!): MutationResponse!
  createComprobarExpresion(comprobarExpresionInput: ContaComprobarExpresionesInput!): MutationResponse!
  updateComprobarExpresion(comprobarExpresionInput: ContaComprobarExpresionesInput!): MutationResponse!
  deleteComprobarExpresion(IDs: [Int!]!): MutationResponse!
  createNoUsarEnCuenta(noUsarEnCuentaInput: ContaNoUsarEnCuentaInput!): MutationResponse!
  updateNoUsarEnCuenta(noUsarEnCuentaInput: ContaNoUsarEnCuentaInput!): MutationResponse!
  deleteNoUsarEnCuenta(IDs: [Int!]!): MutationResponse!
  createComprobarValor(comprobarValorInput: ComprobarValoresInput!): MutationResponse!
  updateComprobarValor(comprobarValorInput: ComprobarValoresInput!): MutationResponse!
  deleteComprobarValor(IDs: [Int!]!): MutationResponse!
  createCajaConfiguracion(cajaConfiguracionInput: CajaConfiguracionInput!): CajaConfiguracionEntity!
  updateCajaConfiguracion(cajaConfiguracionInput: CajaConfiguracionInput!): CajaConfiguracionEntity!
  removeCajaConfiguracion(id: Int!): CajaConfiguracionEntity!
  updateConciliaDWH(conciliaDWH: [ConciliaExternaDwhInput!]!): Int!
  updateConciliacionEntreUnidades(conciliacionUnidadesInput: ConciliacionExternaEntreUnidadesInput!): Float!
  inicializarConciliacion(anno: Int!, mes: Int!): ConciliaExternaDatosConciliacionEntity!
  cerrarConciliacion(anno: Int!, mes: Int!): Float!
  reabrirConciliacion(anno: Int!, mes: Int!): Float!
  saveActFijosClasificadorSubgrupo(actFijosClasificadorSubgrupoInput: ActFijosClasificadorSubgrupoInput!): ActFijosClasificadorSubgrupoEntity!
  deleteActFijosClasificadorSubgrupo(grupo: Int!, codigo: Int!): Int!
}

input UsuarioInput {
  IdUsuario: Float!
  Usuario: String!
  Contrasena: String!
  IdTipoUsuario: Float!
  CambiarContrasena: Boolean!
  ContrasenaAvanzada: String!
  IdDivision: Float!
}

input ContaConexionInput {
  Id: Float
  IdUnidad: Float!
  Consolidado: Boolean!
  IdDivision: Float!
  IpRodas: String
  BaseDatos: String
}

input DWHConexionesInput {
  IdUnidad: Float!
  DWH_ip: String!
  DWH_usuario: String!
  DWH_contrasena: String!
  DWH_baseDatos: String!
  Rest_ip: String!
  Rest_usuario: String!
  Rest_contrasena: String!
  Rest_baseDatos: String!
}

input IniciarSaldosInput {
  idCentro: Float!
  consolidado: Boolean!
  annio: Float!
}

input ClasificadorCuentaRealInput {
  TipoClasificador: Float!
  Cuenta: String!
  SubCuenta: String!
  Nombre: String!
  Naturaleza: String!
  Tipo_Analisis_1: String
  Tipo_Analisis_2: String
  Tipo_Analisis_3: String
  Tipo_Analisis_4: String
  Tipo_Analisis_5: String
  Obligacion: Boolean! = false
  Tipo_Moneda: String
  Grupo: String!
  Clase: String!
  Categoria: String!
  Clasificacion: String!
  Tipo: String!
  Estado: String!
  Tipo_Analisis_1_Cons: String
  Tipo_Analisis_2_Cons: String
  Tipo_Analisis_3_Cons: String
  Tipo_Analisis_4_Cons: String
  Tipo_Analisis_5_Cons: String
  SeUtiliza: String
}

input EmpleadoInput {
  IdEmpleado: Float!
  Empleado: String!
  IdCargo: Float!
  IdDivision: Float!
}

input SupervisorInput {
  IdSupervisor: Float!
  Supervisor: String!
  IdCargo: Float!
  IdDivision: Float!
}

input ConciliaExternaContabilidadUpdateInput {
  Id: Float!
  Recibido: Boolean!
}

input TipoEntidadInput {
  Id: Float!
  Entidades: String!
  Descripcion: String!
}

input EpigrafeInput {
  IdEpigrafe: Float!
  Epigrafe: String!
}

input ElementoGastoInput {
  Egasto: String!
  Descripcion: String!
  UsoContenido: String!
  TipoEntidad: String!
  CuentaAsociada: String!
  IdEpigrafe: Float!
}

input ClasificadorEntidadInput {
  IdUnidad: Float!
  IdTipoEntidad: Float!
}

input ContaExpresionInput {
  ExpresionResumen: ContaExpresionResumenInput!
  ExpresionesDetalle: [ContaExpresionDetalleInput!]!
}

input ContaExpresionResumenInput {
  IdExpresion: Float
  Expresion: String!
  Descripcion: String
  Acumulado: Boolean!
  OperacionesInternas: Boolean!
  Centralizada: Boolean!
  IdDivision: Float!
}

input ContaExpresionDetalleInput {
  Id: Float
  IdExpresion: Float!
  Centro: String
  Cta: String
  SubCta: String
  Crit1: String
  Crit2: String
  Crit3: String
  Signo: String!
  PorCiento: Float!
  TipoValor: Float!
}

input ContaComprobarExpresionesInput {
  Id: Float!
  IdExpresion: Float!
  IdOperador: String!
  IdExpresionC: Float!
  Centro: Boolean!
  Complejo: Boolean!
  Con: Boolean!
  Centralizada: Boolean!
  IdDivision: Float!
}

input ContaNoUsarEnCuentaInput {
  Id: Float!
  Codigo: String
  Cta: String
  SubCta: String
  Crit1: String
  Crit2: String
  Crit3: String
  Crit4: String
  Crit5: String
  Centralizada: Boolean!
  IdDivision: Float!
}

input ComprobarValoresInput {
  Id: Float!
  IdCentro: Float!
  IdExpresion: Float!
  IdOperador: String!
  Valor: Float!
  IdDivision: Float!
  Consolidado: Boolean!
  Activo: Boolean!
}

input CajaConfiguracionInput {
  IdCaja: Int!
  IP: String!
  SN: String!
  IdUnidad: Int!
}

input ConciliaExternaDwhInput {
  Id: Float!
  Recibido: Boolean!
}

input ConciliacionExternaEntreUnidadesInput {
  Annio: Float!
  Mes: Float!
  IdUnidad: Float!
  IdUnidadOD: Float!
  IdUsuarioEmisor: Float
  IdUsuarioReceptor: Float
  IdUsuarioSupervisor: Float
  Nota: String
}

input ActFijosClasificadorSubgrupoInput {
  Grupo: Int!
  Codigo: Int!
  Descripcion: String!
  Tasa: Float!
}