# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MutationResponse {
  success: Boolean!
  error: String
}

type Divisiones {
  IdDivision: Float!
  Division: String!
}

type TipoUsuarios {
  IdTipo: Int!
  TipoUsuario: String!
}

type Usuarios {
  IdUsuario: Float!
  Usuario: String!
  Contrasena: String!
  IdTipoUsuario: Float!
  TipoUsuario: TipoUsuarios!
  CambiarContrasena: Boolean!
  IdDivision: Float!
  Division: Divisiones!
  Token: String!
}

type UsuarioQueryResponse {
  success: Boolean!
  data: Usuarios
  error: String
}

type UsuariosQueryResponse {
  success: Boolean!
  data: [Usuarios!]
  error: String
}

type DivisionesQueryResponse {
  success: Boolean!
  data: [Divisiones!]
  error: String
}

type Unidades {
  IdUnidad: Float!
  Nombre: String
  IdComplejo: Float
  IdSubdivision: Float
  IdDivision: Float
  Provincia: String
  Tipo: Float
  Abierta: Boolean
}

type CentrosView {
  IdUnidad: Float!
  Nombre: String!
  IdSubdivision: Float!
  Subdivision: String!
  IdDivision: Float!
  Division: String!
}

type AllUnidadesQueryResponse {
  success: Boolean!
  data: [CentrosView!]
  error: String
}

type ContaConexiones {
  Id: Float!
  IdUnidad: Float!
  Unidad: String!
  Consolidado: Boolean!
  IdDivision: Float!
  Division: String!
  IpRodas: String
  Usuario: String
  Contrasena: String
  BaseDatos: String
}

type ConciliaContaQueryResponse {
  success: Boolean!
  data: String
  error: String
}

type ConciliaContabilidad {
  ReporteClasificador: ConciliaContaQueryResponse!
  ReporteConsultas: ConciliaContaQueryResponse!
  ReporteExpresiones: ConciliaContaQueryResponse!
  ReporteValores: ConciliaContaQueryResponse!
}

type ConciliaContabilidadQueryResponse {
  success: Boolean!
  data: ConciliaContabilidad
  error: String
}

type Conexiones {
  name: String!
}

type ConexionesQueryResponse {
  success: Boolean!
  data: [Conexiones!]
  error: String
}

type ContaConexionQueryResponse {
  success: Boolean!
  data: ContaConexiones
  error: String
}

type ContaConexionesQueryResponse {
  success: Boolean!
  data: [ContaConexiones!]
  error: String
}

type EstadoConexionesRodas {
  Unidad: String!
  Estado: String!
}

type EstadoConexionesRodasQueryResponse {
  success: Boolean!
  data: [EstadoConexionesRodas!]
  error: String
}

type DWHConexiones {
  IdUnidad: Float!
  ConexionRest: String
  ConexionDWH: String
  ServidorDist: String
}

type DWHConexionQueryResponse {
  success: Boolean!
  data: DWHConexiones
  error: String
}

type Cargos {
  IdCargo: Float!
  Cargo: String!
}

type CargosQueryResponse {
  success: Boolean!
  data: [Cargos!]
  error: String
}

type ClasificadorCuentaReal {
  Cuenta: String!
  SubCuenta: String!
  Descripcion: String!
  Naturaleza: String!
  Crit1: String
  Crit2: String
  Crit3: String
  Obligacion: Boolean!
  TipoClasificador: Float!
  SeUtiliza: String
  Terminal: Boolean!
  Crit1Consolidacion: String
  Crit2Consolidacion: String
  Crit3Consolidacion: String
}

type ClasificadorCuentaQueryResponse {
  success: Boolean!
  data: ClasificadorCuentaReal
  error: String
}

type ClasificadorCuentasQueryResponse {
  success: Boolean!
  data: [ClasificadorCuentaReal!]
  error: String
}

type CuentasAgrupadas {
  Cuenta: String!
}

type CuentasAgrupadasQueryResponse {
  success: Boolean!
  data: [CuentasAgrupadas!]
  error: String
}

type ConciliaDWH {
  Tipo: String!
  IdCentro: Float!
  IdUnidad: String!
  Unidad: String!
  IdPiso: String!
  Almacen: String
  Cuenta: String
  Periodo: String!
  SaldoGolden: Float!
  SaldoRestaurador: Float!
  DifGoldenRest: Float!
  SaldoDistribuidor: Float!
  DifGoldenDist: Float!
  SaldoRodas: Float!
  DifGoldenRodas: Float!
  IdDivision: Float!
  Division: String!
  CuentaR: String
  Nota: String
}

type ConciliaDWHQueryResponse {
  success: Boolean!
  data: [ConciliaDWH!]
  error: String
}

type ParteAtrasosQueryResponse {
  success: Boolean!
  data: String
  error: String
}

type DatosIdGAMQueryResponse {
  success: Boolean!
  data: String
  error: String
}

type Empleado {
  IdEmpleado: Float!
  Empleado: String!
  IdCargo: Float!
  Cargo: Cargos!
  IdDivision: Float!
  Division: Divisiones!
}

type EmpleadoQueryResponse {
  success: Boolean!
  data: Empleado
  error: String
}

type EmpleadosQueryResponse {
  success: Boolean!
  data: [Empleado!]
  error: String
}

type Supervisor {
  IdSupervisor: Float!
  Supervisor: String!
  IdCargo: Float!
  Cargo: Cargos!
  IdDivision: Float!
  Division: Divisiones!
}

type SupervisorQueryResponse {
  success: Boolean!
  data: Supervisor
  error: String
}

type SupervisoresQueryResponse {
  success: Boolean!
  data: [Supervisor!]
  error: String
}

type ConciliacionInterna {
  Documento: String!
  Emisor: String!
  FechaE: DateTime!
  ImporteE: Float!
  Receptor: String!
  FechaR: DateTime!
  ImporteR: Float!
  Diferencia: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ConciliacionInternaDWHQueryResponse {
  success: Boolean!
  data: [ConciliacionInterna!]
  error: String
}

type Subdivisiones {
  IdSubdivision: Float!
  Subdivision: String!
  IdDivision: Float!
}

type SubdivisionesQueryResponse {
  success: Boolean!
  data: [Subdivisiones!]
  error: String
}

type ConcnacContabilidad {
  Id: Float!
  Annio: String!
  Mes: Float!
  CuentaE: String!
  SubCuentaE: String!
  TipoE: String!
  EmisorE: Float!
  ReceptorE: Float!
  DocumentoE: String!
  FechaE: DateTime!
  ValorE: Float!
  CuentaR: String!
  SubCuentaR: String!
  TipoR: String!
  EmisorR: Float!
  ReceptorR: Float!
  DocumentoR: String!
  FechaR: DateTime!
  ValorR: Float!
  Diferencia: Float!
  Recibido: Boolean!
}

type ViewConciliaNacContabilidadQueryResponse {
  success: Boolean!
  data: [ConcnacContabilidad!]
  error: String
}

type ActaConciliacionQueryResponse {
  success: Boolean!
  data: [ActaConciliacion!]
  error: String
}

type ActaConciliacion {
  ID: Float!
  Detalle: Float!
  Emisor: Float!
  Receptor: Float!
  SaldoEmisor: Float!
  SaldoReceptor: Float!
  Diferencia: Float!
}

type TipoEntidades {
  Id: Float!
  Entidades: String!
  Descripcion: String!
}

type ContaTipoentidadesQueryResponse {
  success: Boolean!
  data: [TipoEntidades!]
  error: String
}

type ContaTipoentidadQueryResponse {
  success: Boolean!
  data: TipoEntidades
  error: String
}

type ContaEpigrafes {
  IdEpigafre: Float!
  Epigrafe: String!
}

type EpigrafesQueryResponse {
  success: Boolean!
  data: [ContaEpigrafes!]
  error: String
}

type EpigrafeQueryResponse {
  success: Boolean!
  data: ContaEpigrafes
  error: String
}

type ContaElementosGastos {
  Egasto: String!
  Descripcion: String!
  UsoContenido: String!
  TipoEntidad: String!
  CuentaAsociada: String!
  IdEpigrafe: Float!
}

type ElementosGastosQueryResponse {
  success: Boolean!
  data: [ContaElementosGastos!]
  error: String
}

type ElementoGastoQueryResponse {
  success: Boolean!
  data: ContaElementosGastos
  error: String
}

type ClasificarEntidades {
  IdUnidad: Float!
  Unidad: String
  IdTipoEntidad: Float!
  TipoEntidad: String!
}

type ClasificadorEntidadesQueryResponse {
  success: Boolean!
  data: [ClasificarEntidades!]
  error: String
}

type ClasificadorEntidadQueryResponse {
  success: Boolean!
  data: ClasificarEntidades
  error: String
}

type ExpresionesResumenEntity {
  IdExpresion: Float!
  Expresion: String!
  Descripcion: String
  Acumulado: Boolean!
  OperacionesInternas: Boolean!
  Centralizada: Boolean!
  IdDivision: Float!
}

type ExpresionesDetalleEntity {
  id: Float!
  IdExpresion: Float!
  Centro: String
  Cta: String
  SubCta: String
  Crit1: String
  Crit2: String
  Crit3: String
  Signo: String!
  PorCiento: Float!
  TipoValor: Float!
}

type ContaExpresionResumenQueryResponse {
  success: Boolean!
  data: ExpresionesResumenEntity
  error: String
}

type ContaExpresionDetalleQueryResponse {
  success: Boolean!
  data: ExpresionesDetalleEntity
  error: String
}

type ContaExpresionesResumenQueryResponse {
  success: Boolean!
  data: [ExpresionesResumenEntity!]
  error: String
}

type ContaExpresionesDetalleQueryResponse {
  success: Boolean!
  data: [ExpresionesDetalleEntity!]
  error: String
}

type ContaTipoValorExpresionesEntity {
  IdTipoValor: Float!
  Valor: String!
}

type ContaTipoValorExpresionesQueryResponse {
  success: Boolean!
  data: [ContaTipoValorExpresionesEntity!]
  error: String
}

type ContaOperadoresEntity {
  Id: String!
  Operador: String!
}

type ContaComprobarExpresionesEntity {
  Id: Float!
  IdExpresion: Float!
  IdOperador: String!
  IdExpresionC: Float!
  Centro: Boolean!
  Complejo: Boolean!
  Con: Boolean!
  Centralizada: Boolean!
  IdDivision: Float!
  Expresion: ExpresionesResumenEntity!
  ExpresionC: ExpresionesResumenEntity!
  Operador: ContaOperadoresEntity!
}

type ContaComprobarExpresionesQueryResponse {
  success: Boolean!
  data: [ContaComprobarExpresionesEntity!]
  error: String
}

type ContaComprobarExpresionQueryResponse {
  success: Boolean!
  data: ContaComprobarExpresionesEntity
  error: String
}

type ContaOperadoresQueryResponse {
  success: Boolean!
  data: [ContaOperadoresEntity!]
  error: String
}

type ContaNoUsarEnCuentaEntity {
  Id: Float!
  Codigo: String
  Cta: String
  SubCta: String
  Crit1: String
  Crit2: String
  Crit3: String
  TextoInicio: String
  Centralizada: Boolean!
  IdDivision: Float!
}

type ContaNoUsarEnCuentasQueryResponse {
  success: Boolean!
  data: [ContaNoUsarEnCuentaEntity!]
  error: String
}

type ContaNoUsarEnCuentaQueryResponse {
  success: Boolean!
  data: ContaNoUsarEnCuentaEntity
  error: String
}

type TipoUsuariosQueryResponse {
  success: Boolean!
  data: [TipoUsuarios!]
  error: String
}

type TipoUsuarioQueryResponse {
  success: Boolean!
  data: TipoUsuarios
  error: String
}

type ComprobarValoresEntity {
  Id: Float!
  IdCentro: Float!
  Centro: String!
  IdExpresion: Float!
  Expresion: String!
  IdOperador: String!
  Operador: String!
  Valor: Float!
  IdDivision: Float!
}

type ComprobarValoresQueryResponse {
  success: Boolean!
  data: [ComprobarValoresEntity!]
  error: String
}

type ComprobarValorQueryResponse {
  success: Boolean!
  data: ComprobarValoresEntity
  error: String
}

type CajaConfiguracionEntity {
  IdCaja: Int!
  IP: String!
  SN: String!
  IdUnidad: Int!
}

type ConciliaAFT {
  Division: String!
  SubDivision: String!
  Tipo: String!
  Centro: String!
  IdCentro: Float!
  IdUnidad: Float!
  Unidad: String!
  Periodo: Float!
  Cta: String!
  Scta: String!
  An1: String!
  An2: String!
  An3: String!
  Saldo_AF: Float!
  Saldo_Rodas: Float!
  Diferencia: Float!
}

type DiferenciaClasificadorCNMB {
  Unidad: String!
  CNMB: String!
  DCNMB: String!
  TREPO: Float!
  TREPO_UC: Float!
}

type ConciliaAftData {
  ConciliaAFT: [ConciliaAFT!]
  DiferenciaClasificadorCNMB: [DiferenciaClasificadorCNMB!]
}

type ActFijosClasificadorCnmbEntity {
  CNMB: String!
  DCNMB: String!
  TREPO: Float!
}

type Query {
  authenticateUsuario(usuario: String!, passw: String!): UsuarioQueryResponse!
  getAllUsuarios: UsuariosQueryResponse!
  getUsuarioById(id: Int!): UsuarioQueryResponse!
  getUsuarioByName(name: String!): UsuariosQueryResponse!
  getAllDivisiones: DivisionesQueryResponse!
  getDivisionById(id: Int!): DivisionesQueryResponse!
  getAllContaConexiones: ContaConexionesQueryResponse!
  getContaConexionById(id: Int!): ContaConexionQueryResponse!
  estadoContaConexiones(idDivision: Int!): EstadoConexionesRodasQueryResponse!
  getAllUnidades: AllUnidadesQueryResponse!
  getUnidadesByIdSubdivision(idSubdivision: Int!): AllUnidadesQueryResponse!
  getUnidadesByIdDivision(idDivision: Int!): AllUnidadesQueryResponse!
  getDWHConexion(idDivision: Int!): DWHConexionQueryResponse!
  getAllCargos: CargosQueryResponse!
  conciliaDWH(conciliaDWHInput: ConciliaDWHInput!): ConciliaDWHQueryResponse!
  conciliaContabilidad(conciliaContaInput: ConciliaContaInput!): ConciliaContabilidadQueryResponse!
  getAllClasificadorCuentas: ClasificadorCuentasQueryResponse!
  getClasificadorCuenta(cuenta: String!, subcuenta: String!, tipo: Int!): ClasificadorCuentaQueryResponse!
  getCuentasAgrupadas: CuentasAgrupadasQueryResponse!
  getAllEmpleados: EmpleadosQueryResponse!
  getEmpleadoById(id: Int!): EmpleadoQueryResponse!
  getAllSupervisores: SupervisoresQueryResponse!
  getSupervisorById(id: Int!): SupervisorQueryResponse!
  parteAtrasos(idDivision: Int!): ParteAtrasosQueryResponse!
  datosIdGAM(idDivision: Int!): DatosIdGAMQueryResponse!
  getDataBases(ip: String!, ususario: String!, password: String!): ConexionesQueryResponse!
  conciliaInternaDWH(conciliaInternaDWHInput: ConciliaInternaDWHInput!): ConciliacionInternaDWHQueryResponse!
  getAllSubdivisiones: SubdivisionesQueryResponse!
  getSubdivisionesByIdDivision(idDivision: Int!): SubdivisionesQueryResponse!
  conciliacionContab(annio: Int!, mes: Int!, division: Int!, unidad: Int!, divisionOD: Int!, unidadOD: Int!): ViewConciliaNacContabilidadQueryResponse!
  actaConciliacion(annio: Int!, mes: Int!, unidad: Int!, unidadOD: Int!): ActaConciliacionQueryResponse!
  getAllTipoEntidades: ContaTipoentidadesQueryResponse!
  getTipoEntidadById(id: Int!): ContaTipoentidadQueryResponse!
  getAllEpigrafes: EpigrafesQueryResponse!
  getEpigrafeById(id: Int!): EpigrafeQueryResponse!
  getAllElementosGastos: ElementosGastosQueryResponse!
  getElementoGastoById(id: String!): ElementoGastoQueryResponse!
  getAllClasificadorEntidades: ClasificadorEntidadesQueryResponse!
  getClasificadorEntidad(idUnidad: Int!): ClasificadorEntidadQueryResponse!
  getAllExpresionesResumen: ContaExpresionesResumenQueryResponse!
  getExpresionResumenById(id: Int!): ContaExpresionResumenQueryResponse!
  getAllExpresionesDetalle: ContaExpresionesDetalleQueryResponse!
  getExpresionesDetalleByIdResumen(idResumen: Int!): ContaExpresionesDetalleQueryResponse!
  getExpresionDetalleById(id: Int!): ContaExpresionDetalleQueryResponse!
  getAllContaTipoValorExpresiones: ContaTipoValorExpresionesQueryResponse!
  getAllComprobarExpresiones: ContaComprobarExpresionesQueryResponse!
  getComprobarExpresionById(id: Int!): ContaComprobarExpresionQueryResponse!
  getAllOperadores: ContaOperadoresQueryResponse!
  getAllNoUsarEnCuenta: ContaNoUsarEnCuentasQueryResponse!
  getNoUsarEnCuentaById(id: Int!): ContaNoUsarEnCuentaQueryResponse!
  getAllTipoUsuarios: TipoUsuariosQueryResponse!
  getTipoUsuarios(id: Int!): TipoUsuarioQueryResponse!
  getAllComprobarValores: ComprobarValoresQueryResponse!
  getComprobarValorById(id: Int!): ComprobarValorQueryResponse!
  getCajasConfiguracion: [CajaConfiguracionEntity!]!
  getCajaConfiguracion(id: Int!): CajaConfiguracionEntity!
  getAllActFijosClasificadorCnmb: [ActFijosClasificadorCnmbEntity!]!
  getActFijosClasificadorCnmb(cnmb: String!): ActFijosClasificadorCnmbEntity!
  conciliaAFT(conciliaAftInput: ConciliaAftInput!): ConciliaAftData!
}

input ConciliaDWHInput {
  idDivision: Float!
  idCentro: Float!
  periodo: Float!
  annio: Float!
  tipoCentro: Float!
  ventasAcumuladas: Boolean!
}

input ConciliaContaInput {
  idCentro: Float!
  periodo: Float!
  annio: Float!
  tipoCentro: Float!
  tipoEntidad: Float!
}

input ConciliaInternaDWHInput {
  FechaInicial: String!
  FechaFinal: String!
  IdDivision: Float!
  IdSubdivision: Float!
  IdUnidad: Float!
  IdDivisionOD: Float!
  IdSubdivisionOD: Float!
  IdUnidadOD: Float!
  SoloDiferencias: Boolean!
}

input ConciliaAftInput {
  idCentro: Float!
  periodo: Float!
  annio: Float!
}

type Mutation {
  changePassword(idUsuario: Int!, password: String!): MutationResponse!
  createUsuario(usuarioInfo: UsuarioInput!): MutationResponse!
  updateUsuario(usuarioInfo: UsuarioInput!): MutationResponse!
  deleteUsuario(IDs: [Int!]!): MutationResponse!
  createContaConexion(conexionInfo: ContaConexionInput!): MutationResponse!
  updateContaConexion(conexionInfo: ContaConexionInput!): MutationResponse!
  deleteContaConexion(IDs: [Int!]!): MutationResponse!
  updateDWhConexion(dwhConexionInput: DWHConexionesInput!): MutationResponse!
  iniciarSaldos(iniciarSaldosInput: IniciarSaldosInput!): ConciliaContabilidadQueryResponse!
  chequearCentros(chequearCentrosInput: ChequearCentrosInput!): ConciliaContaQueryResponse!
  arreglaClasificadorCuenta(idUnidad: Int!, tipoUnidad: String!, annio: String!): ConciliaContaQueryResponse!
  saveClasificadorCuenta(clasificadorInfo: ClasificadorCuentaRealInput!): MutationResponse!
  deleteClasificadorCuenta(cuenta: String!, subcuenta: String!, tipo: Int!): MutationResponse!
  createEmpleado(empleadoInfo: EmpleadoInput!): MutationResponse!
  updateEmpleado(empleadoInfo: EmpleadoInput!): MutationResponse!
  deleteEmpleado(IDs: [Int!]!): MutationResponse!
  createSupervisor(supervisorInfo: SupervisorInput!): SupervisorQueryResponse!
  updateSupervisor(supervisorInfo: SupervisorInput!): SupervisorQueryResponse!
  deleteSupervisor(IDs: [Int!]!): SupervisorQueryResponse!
  conciliacionNacionalVsAsiento(annio: Int!, mes: Int!, division: Int!, unidad: Int!, divisionOD: Int!, unidadOD: Int!): MutationResponse!
  updateConciliaContab(data: [ConciliaNacContabilidadInput!]!): MutationResponse!
  createTipoEntidad(tipoEntidadInfo: TipoEntidadInput!): MutationResponse!
  updateTipoEntidad(tipoEntidadInfo: TipoEntidadInput!): MutationResponse!
  deleteTipoEntidad(IDs: [Int!]!): MutationResponse!
  createEpigrafe(epigrafeInfo: EpigrafeInput!): EpigrafeQueryResponse!
  updateEpigrafe(epigrafeInfo: EpigrafeInput!): EpigrafeQueryResponse!
  deleteEpigrafe(IDs: [Int!]!): EpigrafeQueryResponse!
  saveElementoGasto(elementoGastoInfo: ElementoGastoInput!): MutationResponse!
  deleteElementoGasto(id: String!): MutationResponse!
  createClasificadorEntidad(clasificadorEntidadInfo: ClasificadorEntidadInput!): MutationResponse!
  updateClasificadorEntidad(clasificadorEntidadInfo: ClasificadorEntidadInput!): MutationResponse!
  deleteClasificadorEntidad(IDs: [Int!]!): MutationResponse!
  createExpresion(expresionInput: ContaExpresionInput!): MutationResponse!
  updateExpresion(expresionInput: ContaExpresionInput!): MutationResponse!
  deleteExpresionResumen(IDs: [Int!]!): MutationResponse!
  deleteExpresionDetalle(id: [Int!]!): MutationResponse!
  createComprobarExpresion(comprobarExpresionInput: ContaComprobarExpresionesInput!): MutationResponse!
  updateComprobarExpresion(comprobarExpresionInput: ContaComprobarExpresionesInput!): MutationResponse!
  deleteComprobarExpresion(IDs: [Int!]!): MutationResponse!
  createNoUsarEnCuenta(noUsarEnCuentaInput: ContaNoUsarEnCuentaInput!): MutationResponse!
  updateNoUsarEnCuenta(noUsarEnCuentaInput: ContaNoUsarEnCuentaInput!): MutationResponse!
  deleteNoUsarEnCuenta(IDs: [Int!]!): MutationResponse!
  createComprobarValor(comprobarValorInput: ComprobarValoresInput!): MutationResponse!
  updateComprobarValor(comprobarValorInput: ComprobarValoresInput!): MutationResponse!
  deleteComprobarValor(IDs: [Int!]!): MutationResponse!
  createCajaConfiguracion(cajaConfiguracionInput: CajaConfiguracionInput!): CajaConfiguracionEntity!
  updateCajaConfiguracion(cajaConfiguracionInput: CajaConfiguracionInput!): CajaConfiguracionEntity!
  removeCajaConfiguracion(id: Int!): CajaConfiguracionEntity!
  saveActFijosClasificadorCnmb(actfijosClasificadorCnmbInput: ActFijosClasificadorCnmbInput!): ActFijosClasificadorCnmbEntity!
  removeActFijosClasificadorCnmb(cnmb: String!): Float!
}

input UsuarioInput {
  IdUsuario: Float!
  Usuario: String!
  Contrasena: String!
  IdTipoUsuario: Float!
  CambiarContrasena: Boolean!
  ContrasenaAvanzada: String!
  IdDivision: Float!
}

input ContaConexionInput {
  Id: Float
  IdUnidad: Float!
  Consolidado: Boolean!
  IdDivision: Float!
  IpRodas: String
  Usuario: String
  Contrasena: String
  BaseDatos: String
}

input DWHConexionesInput {
  IdUnidad: Float!
  DWH_ip: String!
  DWH_usuario: String!
  DWH_contrasena: String!
  DWH_baseDatos: String!
  Rest_ip: String!
  Rest_usuario: String!
  Rest_contrasena: String!
  Rest_baseDatos: String!
}

input IniciarSaldosInput {
  idCentro: Float!
  consolidado: Boolean!
  annio: Float!
}

input ChequearCentrosInput {
  idCentro: Float!
  annio: Float!
  periodo: Float!
  centrosAChequear: [Int!]!
}

input ClasificadorCuentaRealInput {
  Cuenta: String!
  SubCuenta: String!
  Descripcion: String!
  Naturaleza: String!
  Crit1: String
  Crit2: String
  Crit3: String
  Obligacion: Boolean!
  TipoClasificador: Float!
  SeUtiliza: String
  Terminal: Boolean!
  Crit1Consolidacion: String
  Crit2Consolidacion: String
  Crit3Consolidacion: String
}

input EmpleadoInput {
  IdEmpleado: Float!
  Empleado: String!
  IdCargo: Float!
  IdDivision: Float!
}

input SupervisorInput {
  IdSupervisor: Float!
  Supervisor: String!
  IdCargo: Float!
  IdDivision: Float!
}

input ConciliaNacContabilidadInput {
  Id: Float!
  Recibido: Boolean!
}

input TipoEntidadInput {
  Id: Float!
  Entidades: String!
  Descripcion: String!
}

input EpigrafeInput {
  IdEpigafre: Float!
  Epigrafe: String!
}

input ElementoGastoInput {
  Egasto: String!
  Descripcion: String!
  UsoContenido: String!
  TipoEntidad: String!
  CuentaAsociada: String!
  IdEpigrafe: Float!
}

input ClasificadorEntidadInput {
  IdUnidad: Float!
  IdTipoEntidad: Float!
}

input ContaExpresionInput {
  ExpresionResumen: ContaExpresionResumenInput!
  ExpresionesDetalle: [ContaExpresionDetalleInput!]!
}

input ContaExpresionResumenInput {
  IdExpresion: Float
  Expresion: String!
  Descripcion: String
  Acumulado: Boolean!
  OperacionesInternas: Boolean!
  Centralizada: Boolean!
  IdDivision: Float!
}

input ContaExpresionDetalleInput {
  id: Float
  IdExpresion: Float!
  Centro: String
  Cta: String
  SubCta: String
  Crit1: String
  Crit2: String
  Crit3: String
  Signo: String!
  PorCiento: Float!
  TipoValor: Float!
}

input ContaComprobarExpresionesInput {
  Id: Float!
  IdExpresion: Float!
  IdOperador: String!
  IdExpresionC: Float!
  Centro: Boolean!
  Complejo: Boolean!
  Con: Boolean!
  Centralizada: Boolean!
  IdDivision: Float!
}

input ContaNoUsarEnCuentaInput {
  Id: Float!
  Codigo: String
  Cta: String
  SubCta: String
  Crit1: String
  Crit2: String
  Crit3: String
  TextoInicio: String
  Centralizada: Boolean!
  IdDivision: Float!
}

input ComprobarValoresInput {
  Id: Float!
  IdCentro: Float!
  IdExpresion: Float!
  IdOperador: String!
  Valor: Float!
  IdDivision: Float!
}

input CajaConfiguracionInput {
  IdCaja: Int!
  IP: String!
  SN: String!
  IdUnidad: Int!
}

input ActFijosClasificadorCnmbInput {
  CNMB: String!
  DCNMB: String!
  TREPO: Float!
}